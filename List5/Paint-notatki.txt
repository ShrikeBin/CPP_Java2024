IObject:	//interface canvas works on
- x
- y
- color (?)
- Draw(canvas)
- Move(x, y) //using translate
- Resize(delta) //using scale
- Rotate(angle) //using rotate
- Recolor(color)
- bool selected //optional for drawing

Shape	//abstract class

Square extends Shape implements IObject
[...]


ObjectCanvas extends Canvas:
- IObject selectedObject
- List<IObject> objects
- ColorLabel cl
- Select(x, y)	//uses a geometry util that checks every object from the list if contains x, y - or Shape will implement that
//puts selected object on top
//so probably rearrange objects and draw them again
- Unselect()
{
	selectedObject.selected = false //optional for drawing
	selectedObject = null
}

- ObjectCanvas()
{
	setOnScroll(...) //resizes selectedObject, draws all objects again

	//figure out rotation

	setOnRightClick(...) //popup menu | fill -> selectedObject.Recolor(cl.Get()), draw all above objects again
	//maybe create Canvas.Recolor() for that
}
- Recolor(?)
{
	selectedObject.Recolor(cl.Get())
}
		

OptionButton extends Button:
- OptionButton(icon) //sets icon

SelectButton extends OptionButton:
- SelectButton(icon, ObjectCanvas canvas)
{
	super(icon)
	this.setOnAction(new EventHandler<ActionEvent>()
	{
		@Override
		handle(ActionEvent ae)
		{
			canvas.setOnMouseClicked(e -> 
			{
				canvas.Select(x, y)
				//if no shape contains x, y unselect current selected shape
			}
		}
	}
}
				

ObjectsButton extends OptionButton
- ObjectButton(icon, ObjectCanvas canvas, IObject object)
{
	super(icon)
	this.setOnAction(new EventHandler<ActionEvent>()
	{
		@Override
		handle(ActionEvent ae)
		{
			canvas.setOnMouseClick(e -> 
			{
				object.Move(getX(), getY())
				canvas.Add(object)
				object.Draw(canvas)
			})
		}
	}
}

ColorLabel extends Label:
- selectedColor
- Get()
- Set(color)
{
	//check if color is ok
	//set background to color
	selectedColor = color
}

ColorButton extends Button:
- ColorButton(color, ColorLabel cl)
{
	this.setOnAction(...
	{
		handle(...)
		{
			cl.Set(color)
		}
	}
}

ColorPalette extends GridPane:
- takes in list of colors and creates grid 2x(size/2) of ColorButtons

OptionPalette extends GridPane:	//analogically
- takes in list of OptionButtons and creates grid 1xsize

EditingPane extends GridPane:
- takes in: OptionPalette, ColorLabel, ColorPalette
				